/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * Copyright 2015-2020 Andres Almiray
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

config {
    info {
        name          = 'JSilhouette'
        description   = 'Additional shapes for JavaFX applications'
        inceptionYear = '2015'
        tags          = ['javafx', 'shapes']

        specification { enabled = false }
    }

    docs {
        sourceHtml {
            overview {
                stylesheet = project(':guide').file('src/javadoc/resources/css/stylesheet.css')
            }
        }

        sourceXref {
            inputEncoding = 'UTF-8'
        }

        javadoc {
            options {
                addBooleanOption('javafx', true)
                links('http://docs.oracle.com/javase/8/javafx/api/')
            }
        }
    }
}

allprojects {
    apply plugin: 'idea'
}

idea {
    project {
        jdkName '1.8'
        languageLevel '1.8'

        ipr {
            withXml { provider ->
                def node = provider.asNode()
                node.component.find { it.'@name' == 'VcsDirectoryMappings' }?.mapping[0].'@vcs' = 'Git'
            }
        }
    }
}

subprojects { subproj ->
    license {
        mapping {
            fxml = 'XML_STYLE'
        }
    }
}

configurations {
    asciidoclet
}

dependencies {
    asciidoclet "org.asciidoctor:asciidoclet:$asciidocletVersion"
}

evaluationDependsOn ':image-generator'

task generateImages {
    dependsOn project(':image-generator').run
    doFirst {
        file(aggregateJavadoc.destinationDir).mkdirs()
    }
    doLast {
        copy {
            into file("${aggregateJavadoc.destinationDir}/images")
            from project(':image-generator').file('build/images')
        }
    }
}

gradle.addBuildListener(new BuildAdapter(){
    @Override
    void projectsEvaluated(Gradle gradle) {
        def aggregateJavadocTask = rootProject.tasks.findByName('aggregateJavadoc')

        aggregateJavadocTask.configure {
            dependsOn generateImages
            options.docletpath = configurations.asciidoclet.files.asType(List)
            options.doclet = 'org.asciidoctor.Asciidoclet'
            options.addStringOption '-base-dir', "${projectDir}"
            options.addStringOption '-attribute', 'imagesdir=images'
        }
    }
})
